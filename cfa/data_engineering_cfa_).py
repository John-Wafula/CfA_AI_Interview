# -*- coding: utf-8 -*-
"""DATA Engineering -CfA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BUNPsyQ1imTo3DUuAOApDdg8EPwvmXtk
"""

import pandas as pd
import os

# Function to create the data models (in memory)
def create_data_model():
    dim_org = pd.DataFrame(columns=['org_id', 'org_name'])
    fact_inspections = pd.DataFrame(columns=['vehicle_id', 'inspection_date', 'org_id', 'inspection_result'])
    return dim_org, fact_inspections

# Function to read and process the CSV files with inconsistency handling and organization name correction
def process_dump(dump_file, dim_org, fact_inspections):
    df = pd.read_csv(dump_file, delimiter='|')

    # Handle missing values
    df = df.dropna(subset=['vehicle_id', 'inspection_date', 'vehicle_org_id', 'inspection_passed'])

    # Handle duplicate records
    df = df.drop_duplicates(subset=['vehicle_id', 'inspection_date'])

    # Ensure inspection_passed column contains only boolean values
    df = df[df['inspection_passed'].apply(lambda x: isinstance(x, bool))]

    # Correct organization name "Cars ""R"" Us" to "Cars-R-Us"
    df['org_name'] = df['org_name'].replace('Cars-R-Us','"Cars ""R"" Us"')

    # Processing dim_org table
    df_org = df[['vehicle_org_id', 'org_name']].drop_duplicates()
    df_org.columns = ['org_id', 'org_name']

    # Merge with the existing dim_org DataFrame
    dim_org = pd.concat([dim_org, df_org]).drop_duplicates(subset=['org_id']).reset_index(drop=True)

    # Processing fact_inspections table
    df_fact = df[['vehicle_id', 'inspection_date', 'vehicle_org_id', 'inspection_passed']]
    df_fact.columns = ['vehicle_id', 'inspection_date', 'org_id', 'inspection_result']

    # Convert inspection_result to binary
    df_fact['inspection_result'] = df_fact['inspection_result'].apply(lambda x: 1 if x else 0)

    # Merge with the existing fact_inspections DataFrame
    fact_inspections = pd.concat([fact_inspections, df_fact]).drop_duplicates(subset=['vehicle_id', 'inspection_date']).reset_index(drop=True)

    return dim_org, fact_inspections

# Function to generate the report
def generate_report(dim_org, fact_inspections):
    latest_vehicle_fail = fact_inspections.sort_values('inspection_date', ascending=False).drop_duplicates('vehicle_id')

    org_report = latest_vehicle_fail.groupby('org_id').agg(
        total_inspected_vehicle=('vehicle_id', 'size'),
        vehicle_fail=('inspection_result', lambda x: (x == 0).sum())
    )
    org_report['percent_vehicle_fail'] = (org_report['vehicle_fail'] / org_report['total_inspected_vehicle']).round(2)

    report = org_report.merge(dim_org, on='org_id')
    report = report.sort_values('percent_vehicle_fail', ascending=False).head(3)

    report.to_csv('C:/Users/user/Documents/Projects/Code For Africa/virs_report.tsv', sep='|', index=False)
    return report

if __name__ == "__main__":
    dim_org, fact_inspections = create_data_model()

    dump_files = [
        "C:/Users/user/Documents/Projects/Code For Africa/vir_202006.csv",
        "C:/Users/user/Documents/Projects/Code For Africa/vir_202006.csv",
        "C:/Users/user/Documents/Projects/Code For Africa/vir_202006.csv"
    ]

    for dump_file in sorted(dump_files):
        dim_org, fact_inspections = process_dump(dump_file, dim_org, fact_inspections)

    # Save the data stores (DataFrames) to disk
    dim_org.to_csv('C:/Users/user/Documents/Projects/Code For Africa/dim_org.csv', index=False)
    fact_inspections.to_csv('C:/Users/user/Documents/Projects/Code For Africa/fact_inspections.csv', index=False)

    report = generate_report(dim_org, fact_inspections)
    print(report)